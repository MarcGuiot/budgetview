From: Jay Sachs <jay@contravariant.org>
To: prevayler-discussion@lists.sourceforge.net
Subject: [Prevayler-discussion] transaction facade
Date: Tue, 7 Oct 2003 10:56:26 -0400



I suspect that many Prevayler-based systems hide the various 
Transactions behind one or more facade-like entities, variously known 
as a "home", "repository", "persister", etc. For instance, a Wiki 
system may have one such facade:

  interface WikiPageRepository {
     WikiPage fetchPage(String pageName);
     void savePage(String pageName, WikiPage page);
  }

In a prevayler system, the interface (and its implementation) are most 
likely there to hide the messier details of creating and taking apart 
Transactions. Such a facade can also facilitate unit testing. It can 
also allow the persistence needs of a system to evolve over time -- 
either away from (or towards) a RDBMS.

Especially while prototyping, I'd prefer to not think at all about how 
the various entites are persisted in a system. Prevayler's requirements 
on the persisted objects is very minimal -- they simply need to be 
Serializable. Even so, I'd prefer not to have to write all the various 
transaction objects.

What I've done is create essentially a kind of "facade factory", which 
I've tentatively named a PrevaylerTransactionsFacade, which given a 
Prevayler and a repository interface, uses dynamic proxies to create an 
implementation of that interface which automatically creates and uses 
the appropriate Transaction objects. For example, given the above 
WikiPageRepository interface and the following implementation of it:

   class MapWikiPageRepository implements WikiPageRepository, Serializable {
      final private Map pages = new HashMap();
      public WikiPage fetchPage(String pageName) {
          return (WikiPage) pages.get(pageName);
      }
      public void savePage(String pageName, WikiPage page) {
          pages.put(pageName, page);
      }
   }

one can do the following:

   Prevayler prev =
     PrevaylerFactory.createPrevayler(new MapWikiPageRepository(), "data");

and then

   PageRepository wikiPageRepo = (WikiPageRepository)
       PrevaylerTransactionsFacade.create(WikiPageRepository.class, prev);

No reference at all the the various Transaction objects -- it's taken 
care of by the PrevaylerTransactionsFacde class.

The performance cost of the reflection in the dynamic proxy is real 
though minimal.

The real tricky issue is how should the TransactionsFacade class "know" 
which kind of Transaction (Query, Transaction, TransactionWithQuery) to 
create for each repository interface method. I chose to make that 
decision pluggable via the Strategy pattern. The Strategy 
implementation is given the java.lang.reflect.Method to determine which 
Transaction to create.  By default, the current implementation takes 
the safe route, and turns everything into a TransactionWithQuery. That 
is clearly overkill, as methods which are queries get logged as 
transactions. More sophisticated strategies include but are clearly not 
limited to basing that decision on the return type, parameter type(s), 
and method name. A risk is that a given implementation may fail to 
classify a transaction as such, e.g. by determining that it is a Query. 
Within a single project or system, however, it should be possible to 
make these determinations with confidence (or else your method naming 
scheme is highly inconsistent, anwhich brings its own problems).

I've put together a quick page including something like this 
description, as well as a download of the code (which is very light) at

   http://www.contravariant.org/~jay/prevayler

I very much welcome any comments or criticisms.

Jay
