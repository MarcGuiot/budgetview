From: Weisberg, Robin [robin.weisberg@lehman.com]
Sent: Monday, May 12, 2003 10:05 PM
To: 'prevayler-discussion@lists.sourceforge.net'
Subject: RE: [Prevayler-discussion] TODO for 2.0 and beyond

Here is the code for batching writes. As I mentioned earlier, I threw it together as a proof of concept. We are using currently while perf testing our app so its been exercised a bit but it hasn't been to production yet...

Quick Notes
-----------
1) All changes were in the org.prevayler.implementation package
2) Added class BatchedCommandOutputStream. This is a replacement for CommandOutputStream.
3) Added ExecuteCommandThread.
4) Added some -D options in BatchedCommandOutputStream which I found useful while perf tuning. They are:
	a) PrevaylerMaxWriteBatchSize - This will ensure that no more than this number of commands are written to disk in once "commit". In theory, useful to control latency. Defaults to 1000.
	b) PrevaylerLogFileSize - what size to roll the log file at. Defaults to 5MB.
	c) PrevaylerGzipOutput - whether to Gzip the output stream for smaller logs files and writes. Useful if you got CPU to burn. Defaults to true.
	d) PrevaylerAsyncExecute - whether to execute commands on a dedicated ExecuteCommandThread. Explained further below. Defaults to true.
5) Changed the way clock interacts w/ system.
6) Implementation is a little messy, too many objects are interacting w/ other objects (high coupling). This was because I was trying to avoid refactoring the current layout...

Overview
--------

Put your threading helmets on, never have you seen the synchronized keyword so heavily abused! ;-)

When a command is executed the BatchedCommandOutputStream's
writeAndExecuteCommand(Command) method is called. It wraps the command in a ClockRecoveryCommand and puts it on the writeCommandToDiskQueue which is serviced by the BatchedCommandOutputStream's internal thread. Using wait & notify the write thread is notified and begins to write whatever is on the queue to disk. The application thread (calling thread) then executes a
wait() on the command it wants results for.

When the disk write completes the thread will pass on the commands written to disk to the ExecuteCommandThread. The ExecuteCommandThread (poorly named since its not always a thread) either executes the commands immediately or puts them in its internal queue to be processed by its own thread (depending on -DPrevaylerAsyncExecute's value. Default is to execute on its thread). Using a separate thread for executing helps maximize CPU usage since commands execute while writing is in progress.

The BatchedCommandOutputStream and ExecuteCommandThread share 2 maps. One for return values and one for exceptions. The ExecuteCommandThread puts values in these maps using the command as the key and return value or Exception as a value. The ExecuteCommandThread then calls notify on the command object it just executed letting the application thread know that the disk write is complete and there is a return result or exception in one of the 2 maps.

Hope this makes sense! Its late and I'm tired so who knows...

Regards,
Robin


-----Original Message-----
From: Klaus Wuestefeld [mailto:klauswuestefeld@yahoo.com] 
Sent: Monday, May 12, 2003 4:14 PM
To: prevayler-discussion@lists.sourceforge.net
Subject: RE: [Prevayler-discussion] TODO for 2.0 and beyond


> I'd think its pretty important for 2.0 simply for PR
> reasons. Now you can
> update the website to show that prevayler is X times
> faster than all the
> other DB's out there for manipulations (writes).

I think it actually gives us credibility to say that
we are a bit slower than MySQL in at least one
criterium.

Technically, though, it is better for Prevayler to be
faster, of course.

I'll wait for the code.

See you, Klaus.



--- "Weisberg, Robin" <robin.weisberg@lehman.com>
wrote:
> The write bottleneck changes I proposed do not
> change the API or the
> expected behavior of Prevayler. They just make
> things faster.
>  
> I'd think its pretty important for 2.0 simply for PR
> reasons. Now you can
> update the website to show that prevayler is X times
> faster than all the
> other DB's out there for manipulations (writes).
> Currently prevayler is in
> the middle somewhere.
>  
> I'll try to post the code I have tonite(EST). Its
> based off of the 1.02.001
> production release. I'm not going to be able to make
> the changes for 2.0
> though (sorry).
>  
> Robin
>  
> -----Original Message-----
> From: Dave Orme [mailto:DaveO@ASC-iSeries.com]
> Sent: Monday, May 12, 2003 12:57 PM
> To: prevayler-discussion@lists.sourceforge.net
> Subject: [Prevayler-discussion] TODO for 2.0 and
> beyond
> 
> 
> 
> I wasn't able to find a TODO file for 2.0.  Should I
> commit one to the
> repository?
> 
> Off the top of my head, the things that are still
> needed are:
> 
> - Finish failover support with multiple Prevaylers /
> multiple JVMs
> 
> - Resolve the ClockedTransaction / ClockedActor
> issue
> 
> - Add a (possibly optional) Transaction queue in
> front of Prevayler that
> lets us batch Transaction log writes along the lines
> of the discussion at
>
http://www.prevayler.org/wiki.jsp?topic=OvercomingTheWriteBottleneck
>
<http://www.prevayler.org/wiki.jsp?topic=OvercomingTheWriteBottleneck>
> .
> Maybe this should go in 3.0 but I put it in 2.0
> since it might break APIs
> again.
> 
> Robin, if you're still around, can you comment on
> this?
> 
> 
> Anything else?
> 
> 
> 
> What do people want to see in 3.0?  I put a TODO
> file in my SocketServer's
> root folder in Contrib; perhaps some of the items I
> put there should be
> migrated into a 3.0 plan for Prevayler?
> 
> Something I'd like to see us try to tackle for 3.0
> is to experiment with and
> implement one or more of the solutions described at:
>
http://www.prevayler.org/wiki.jsp?topic=SchemaEvolution
>
<http://www.prevayler.org/wiki.jsp?topic=SchemaEvolution>
> 
> 
> 
> 
> What does everyone else think?
> 
> 
> 
> Regards,
> 
> Dave Orme
> 
> 
>
----------------------------------------------------------------------------
--
> This message is intended only for the personal and confidential use of
> the designated recipient(s) named above.  If you are not the intended 
> recipient of this message you are hereby notified that any
> review, dissemination, distribution or copying of
> this message is strictly prohibited.  This
> communication is for information purposes only and
> should not be regarded as an offer to sell or as a
> solicitation of an offer to buy any financial
> product, an official confirmation of any
> transaction, or as an official statement of Lehman
> Brothers.  Email transmission cannot be guaranteed
> to be secure or error-free.  Therefore, we do not
> represent that this information is complete or
> accurate and it should not be relied upon as such. 
> All information is subject to change without notice.
> 
> 


__________________________________
Do you Yahoo!?
The New Yahoo! Search - Faster. Easier. Bingo. http://search.yahoo.com


-------------------------------------------------------
Enterprise Linux Forum Conference & Expo, June 4-6, 2003, Santa Clara The only event dedicated to issues related to Linux enterprise solutions www.enterpriselinuxforum.com

_______________________________________________
To unsubscribe go to the end of this page: http://lists.sourceforge.net/lists/listinfo/prevayler-discussion
_______________________________________________
"Do you still use a database?" -- http://www.prevayler.org


------------------------------------------------------------------------------
This message is intended only for the personal and confidential use of the designated recipient(s) named above.  If you are not the intended recipient of this message you are hereby notified that any review, dissemination, distribution or copying of this message is strictly prohibited.  This communication is for information purposes only and should not be regarded as an offer to sell or as a solicitation of an offer to buy any financial product, an official confirmation of any transaction, or as an official statement of Lehman Brothers.  Email transmission cannot be guaranteed to be secure or error-free.  Therefore, we do not represent that this information is complete or accurate and it should not be relied upon as such.  All information is subject to change without notice.

