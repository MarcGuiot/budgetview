<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?> 
<!DOCTYPE project [
    <!ENTITY general-utility-targets SYSTEM "file:./utility-targets.incl">
    <!ENTITY self-customized-targets SYSTEM "file:./custom-targets.incl">
]>

<project name="Prevayler" default="compile.core" basedir=".">

    <property file="${user.home}/.${ant.project.name}-build.properties"/>
    <property file="${user.home}/.build.properties"/>
    <property environment="env"/> <!-- provides property file access to system environment variables -->
    <property file="build.properties"/>
    <property file="sample.build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

    <!-- source and other non-generated directories -->
    <property name="rootdir"            location="${basedir}/root" />
    <property name="srcdir"             location="${basedir}/src" />
    <property name="srcdir.main"        location="${srcdir}/main" />
    <property name="srcdir.test"        location="${srcdir}/test" />

    <!-- generated build directories -->
    <property name="targetdir"          location="${basedir}/target" />
    <property name="cachedir.demo"      location="${targetdir}/demo-cache" />
    <property name="cachedir.test"      location="${targetdir}/test-cache" />
    <property name="classesdir.main"    location="${targetdir}/main-classes" />
    <property name="classesdir.test"    location="${targetdir}/test-classes" />
    <property name="classesdir.contrib" location="${targetdir}/contrib-classes" />
    <property name="testreportdir"      location="${targetdir}/test-reports" />
    <property name="libdir"             location="${targetdir}/lib" />
    <property name="docdir"             location="${targetdir}/docs" />

    <!-- Default values specified in sample.build.properties.  Override in build.properties -->
    <property name="dependenciesdir"    location="${dependencies.path}" />

    <!-- Log4j utility build and demo runtime properties -->
    <property name="log4j.system.variable.dynamic.name" value="$${${app.Name}.log.home}" />
    <property name="log4j.system.variable.name" value="${app.Name}.log.home" />
    <property name="log4j.log.path" location="${targetdir}/logs" />

<!-- === Compilation Control Option Defaults. Override in build.properties === -->

    <property name="build.sysclasspath" value="last" />
    <property name="build.compiler"     value="modern" />
    <property name="build.debug"        value="on" />
    <property name="build.deprecation"  value="off" />
    <property name="build.optimize"     value="on" />
    <property name="build.source"       value="1.3" /> <!-- source 1.3, target 1.2 - provides compatibility with JDK1.4 when built under JDK1.5+ (1.5/1.5 for JDK1.5) -->
    <property name="build.target"       value="1.2" />
    <property name="build.verbose"      value="off" />

<!-- ==================== Compilation Classpath =========================== -->

    <path id="build.classpath" >
        <pathelement location="${skaringa.jar}"/>
        <pathelement location="${xstream.jar}"/>
        <pathelement location="${xpp3.jar}"/>
        <pathelement location="${jgroups.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${jaxen.jar}"/>
        <pathelement location="${ognl.jar}"/>
        <pathelement location="${javamatch.jar}"/>
        <pathelement location="${commons-jxpath.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="/home/guiot/dev/java/pro/prevayler/root/lib/junit-3.8.1.jar"/>
        <pathelement location="${xml-apis.jar}"/> <!-- Not required under j2sdk1.4.x. Here to run xml demo under JDK1.3.x -->
        <pathelement location="${xalan.jar}"/> <!-- Not required under j2sdk1.4.x. Here to run xml demo under JDK1.3.x -->
    </path>

    <path id="build.core.classpath" >
        <pathelement location="${classesdir.main}" />
        <path refid="build.classpath" />
    </path>

    <path id="build.run.classpath" >
        <pathelement location="${classesdir.contrib}" />
        <pathelement location="${classesdir.test}" />
        <path refid="build.core.classpath" />
    </path>

<!-- ==================== Rebuild Target ====================================== -->

  <target name="rebuild" depends="clean, compile.core"
          description="Clean, then compile core sources" />

<!-- ==================== Clean Targets ==================================== -->

    <target
        name="clean.all"
        depends="clean, clean.cache, clean.dependencies, clean.vizant"
        description="Bring everything back to its initial clean state" />

    <target name="clean"
            description="Delete old build and dist directories" >
        <delete includeEmptyDirs="true">
            <fileset dir="${targetdir}" includes="**/**" excludes="*-cache/**" />
        </delete>
    </target>

    <target name="clean.cache"
            depends="clean.cache.tests, clean.cache.demos"
            description="Removes log and snapshot files generated by tests and demos" />

    <target name="clean.cache.tests"
            description="Removes log and snapshot files generated by tests" >
        <delete dir="${cachedir.test}" />
    </target>

    <target name="clean.cache.demos"
            description="Removes log and snapshot files generated by demos" >
        <delete dir="${cachedir.demo}" />
    </target>

<!-- ==================== Prepare Target ================================== -->

    <target name="prepare" depends="-prepare.build" >
        <mkdir  dir="target" />
        <mkdir  dir="${classesdir.main}" />
        <mkdir  dir="${classesdir.test}" />
        <mkdir  dir="${classesdir.contrib}" />
        <mkdir  dir="${log4j.log.path}" />
        <copy todir="${basedir}" >
            <fileset dir="${basedir}" excludes="sample.build.properties">
                <present present="srconly" targetdir="${basedir}">
                    <mapper type="glob" from="sample.*" to="*" />
                </present>
            </fileset>
            <filterset>
                <filter token="log4j.system.variable.dynamic.name" value="${log4j.system.variable.dynamic.name}" />
            </filterset>
            <mapper type="glob" from="sample.*" to="*" />
        </copy>
        <copy file="${basedir}/log4j.xml" todir="${classesdir.main}" />
        <copy file="${rootdir}/docs/License.txt" tofile="${classesdir.main}/Prevayler.license.txt" />
        <!-- Fileset for unit tests.  Default values specified in sample.build.properties.  Override in build.properties -->
        <fileset id="unit.test.files"
            dir="${srcdir.test}"
            includes="${unit.test.includes}"
            excludes="${unit.test.excludes}" />
        <fileset id="unit.test.files.contrib"
            dir="${classesdir.contrib}"
            includes="${unit.test.includes.contrib}"
            excludes="${unit.test.excludes.contrib}" />
        <tstamp/>
    </target>

<!-- ==================== Compile Targets ================================== -->

    <target name="compile" depends="compile.core, compile.test, compile.contrib"
            description="Compile all specified sources" />
    <target name="compile.core" depends="prepare, download.dependencies.core"
            description="Compile core sources" >
        <antcall target="-compile.sub">
            <param name="compsrcdir"  value="${srcdir.main}" />
            <param name="compdestdir" value="${classesdir.main}" />
            <param name="compcprefid" value="build.classpath" />
        </antcall>
    </target>
    <target name="compile.test" depends="compile.core"
            description="Compile test case sources" >
        <antcall target="-compile.sub">
            <param name="compsrcdir"  value="${srcdir.test}" />
            <param name="compdestdir" value="${classesdir.test}" />
        </antcall>
    </target>
    <target name="compile.contrib" depends="compile.core, download.dependencies.contrib"
            description="Compile contrib sources" >
        <antcall target="-compile.sub">
            <param name="compsrcdir"  value="${src.contrib.projects}" />
            <param name="compdestdir" value="${classesdir.contrib}" />
        </antcall>
    </target>

<!-- ==================== Javadoc Target ================================== -->

    <target name="javadoc" depends="compile.core"
            description="Create Javadoc API documentation" >
        <delete dir="${docdir}/api" />
        <mkdir dir="${docdir}/api/beginners" />
        <mkdir dir="${docdir}/api/advanced" />
        <!-- beginners -->
        <antcall target="-javadoc.sub">
            <param name="jdocincludes"   value="org/prevayler" />
            <param name="jdocsourcepath" value="${srcdir.main}" />
            <param name="jdocdestdir"    value="${docdir}/api/beginners" />
        </antcall>
        <!-- advanced -->
        <antcall target="-javadoc.sub">
            <param name="jdocincludes"   value="org/prevayler, org/prevayler/implementation/**, org/prevayler/foundation/serialization/**" />
            <param name="jdocsourcepath" value="${srcdir.main}" />
            <param name="jdocdestdir"    value="${docdir}/api/advanced" />
        </antcall>
    </target>

<!-- ==================== Jar Targets ================================== -->

    <target name="jar" depends="compile.core"
            description="Creates all jars" >
        <delete dir="${libdir}" />
        <mkdir dir="${libdir}" />
        <!--Creates a JAR containing only essential Prevayler files -->
        <antcall target="-jar.sub">
            <param name="jarfile"     value="${libdir}/${jar.name.core}.jar" />
            <param name="jarbasedir"  value="${classesdir.main}" />
            <param name="jarexcludes" value="**/demo/**,**/demos/**,**/test/**,log4j.xml" />
        </antcall>
        <!--Creates a JAR containing all compiled files -->
        <!--<antcall target="-jar.sub">
            <param name="jarfile"     value="${libdir}/${jar.name.all}.jar" />
            <param name="jarbasedir"  value="${classesdir.main}" />
            <param name="jarexcludes" value="log4j.xml" />
        </antcall>-->
    </target>

<!-- ==================== Dist Target ===================================== -->

    <target name="-distvalidcheck" depends="test" unless="skip.distvalidcheck" >
        <!-- Add any failure checks which should abort the build if true here.
             Don't forget to add a depends target here and generate a failure
             property to test for in any added <fail> task.  To skip failure
             checks, supply skip.distvalidcheck=true in build.properties -->
        <fail if="junit.tests.failed">
        Distribution creation aborted because the JUnit tests failed.
        </fail>
    </target>
    <target name="dist" depends="-distvalidcheck, jar, javadoc, -download.dist"
            description="Create binary distribution" >
        <delete>
            <fileset dir="${targetdir}" includes="*.zip, *.tar.gz"/>
        </delete>
        <!-- Klaus added jars to root/lib, so this is redundant -->
        <!--<copy todir="${libdir}" file="${skaringa.jar}"/>
        <copy todir="${libdir}" file="${commons-logging.jar}"/>
        <copy tofile="${libdir}/Skaringa.license.txt" file="${skaringa.license}"/>
        <copy tofile="${libdir}/commons-logging.license.txt" file="${commons-logging.license}"/>-->
        <!--<copy todir="${libdir}" file="${log4j.jar}"/>
        <copy todir="${libdir}" file="${xml-apis.jar}"/>
        <copy todir="${libdir}" file="${xalan.jar}"/>-->
        <!-- Generate ZIP distribution -->
        <zip destfile="${targetdir}/${dist.name}.zip">
            <zipfileset dir="${rootdir}"     prefix="${dist.name}"/>
            <zipfileset dir="${libdir}"      prefix="${dist.name}" includes="${app.name}*.jar"/>
            <zipfileset dir="${libdir}"      prefix="${dist.name}/lib" excludes="${app.name}*.jar"/>
            <zipfileset dir="${docdir}"      prefix="${dist.name}/docs"/>
            <zipfileset dir="${srcdir.main}" prefix="${dist.name}/src"/>
        </zip>
        <!-- Generate GZIP distribution -->
        <tar destfile="${targetdir}/${dist.name}.tar" longfile="gnu">
            <tarfileset dir="${rootdir}"     prefix="${dist.name}"/>
            <tarfileset dir="${libdir}"      prefix="${dist.name}" includes="${app.name}*.jar"/>
            <tarfileset dir="${libdir}"      prefix="${dist.name}/lib" excludes="${app.name}*.jar"/>
            <tarfileset dir="${docdir}"      prefix="${dist.name}/docs"/>
            <tarfileset dir="${srcdir.main}" prefix="${dist.name}/src"/>
        </tar>
        <gzip src="${targetdir}/${dist.name}.tar" zipfile="${targetdir}/${dist.name}.tar.gz"/>
        <delete file="${targetdir}/${dist.name}.tar" />
    </target>

    <target name="damagecontrol">
    	<property name="distdir" value="/home/projects/prevayler/dist" />
        <property name="scp" value="scp"/>
        <property name="damagecontrol.username" value="dcontrol"/>
        <macrodef name="macroscp">
            <attribute name="file"/>
            <attribute name="todir"/>
            <sequential>
                <exec dir="." executable="${scp}" failonerror="true">
                    <arg path="@{file}"/>
                    <arg value="${damagecontrol.username}@dist.codehaus.org:/home/projects/prevayler/dist/@{todir}"/>
                </exec>
            </sequential>
        </macrodef>

        <ant target="clean"/>

        <ant target="dist" inheritAll="false">
            <property name="app.version" value="SNAPSHOT"/>
        </ant>
        <!--<macroscp file="${libdir}/${app.name}-SNAPSHOT.jar" todir="jars"/>
        <macroscp file="${targetdir}/${app.name}-SNAPSHOT.*" todir="distributions"/>-->
        <copy file="${libdir}/${app.name}-SNAPSHOT.jar" todir="${distdir}/jars"/>
        <copy file="${targetdir}/${app.name}-SNAPSHOT.*" todir="${distdir}/distributions"/>

        <tstamp/>
        <ant target="dist" inheritAll="false">
            <property name="app.version" value="${DSTAMP}"/>
        </ant>
        <!--<macroscp file="${libdir}/${app.name}-${DSTAMP}.jar" todir="jars"/>
        <macroscp file="${targetdir}/${app.name}-${DSTAMP}.*" todir="distributions"/>-->
        <copy file="${libdir}/${app.name}-${DSTAMP}.jar" todir="${distdir}/jars"/>
        <copy file="${targetdir}/${app.name}-${DSTAMP}.*" todir="${distdir}/distributions"/>
    </target>

<!-- ==================== Test Targets ================================== -->

    <target name="test" depends="compile.test"
            description="Runs JUnit tests" >
        <mkdir dir="${cachedir.test}" />
        <delete dir="${testreportdir}" />
        <mkdir dir="${testreportdir}" />
        <junit dir="${cachedir.test}" printsummary="yes" haltonfailure="no" failureproperty="junit.tests.failed" fork="yes" >
            <classpath refid="build.run.classpath" />
            <sysproperty
                key="${log4j.system.variable.name}"
                value="${log4j.log.path}" />
            <!--<sysproperty
                key="log4j.configuration"
                value="file:./log4j.xml" />-->
            <formatter
                type="plain"
                usefile="yes" />
            <formatter
                type="xml"
                usefile="yes" />
            <test todir="${testreportdir}" name="${testcase}" if="testcase" />
            <batchtest todir="${testreportdir}" unless="testcase" >
                <fileset refid="unit.test.files" />
                <fileset refid="unit.test.files.contrib" />
            </batchtest>
        </junit>
        <antcall target="-test.report.html" />
    </target>
    <target name="-test.report.html" >
            <!--description="Convert the junit xml files to html" -->
        <junitreport todir="${testreportdir}" >
            <fileset dir="${testreportdir}" >
                <include name="TEST-*.xml" />
            </fileset>
            <report
                format="frames"
                todir="${testreportdir}/html" />
        </junitreport>
    </target>

<!-- ==================== Dependency Targets ================================== -->

    <target name="download" depends="-download.dist, download.dependencies.utilities, download.dependencies.vizant"
            description="Download all specified binary packages" />
    <target name="-download.dist" depends="download.dependencies.core, download.dependencies.test, download.dependencies.contrib, download.dependencies.runtime" />
    <target name="download.dependencies.core"
            description="Download binary packages needed by the core packages" >
        <!-- Download any sub package or tools needed. -->
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${log4j.loc}"/>
            <param name="destfile"   value="${log4j.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${skaringa.loc}"/>
            <param name="destfile"   value="${skaringa.jar}"/>
        </antcall>
        <antcall target="-downloadfile">
            <param name="sourcefile" value="${xstream.loc}"/>
            <param name="destfile"   value="${xstream.jar}"/>
        </antcall>
        <antcall target="-downloadfile">
            <param name="sourcefile" value="${xpp3.loc}"/>
            <param name="destfile"   value="${xpp3.jar}"/>
        </antcall>
        <antcall target="-downloadfile">
            <param name="sourcefile" value="${javamatch.loc}"/>
            <param name="destfile"   value="${javamatch.jar}"/>
        </antcall>
    </target>
    <target name="download.dependencies.test"
            description="Download binary packages needed by the test packages" >
        <!-- Download any sub package or tools needed. -->
    </target>
    <target name="download.dependencies.contrib"
            description="Download binary packages needed by the contrib packages" >
        <!-- Download any sub package or tools needed. -->
        <antcall target="-downloadfile">
            <param name="sourcefile" value="${jaxen.loc}"/>
            <param name="destfile"   value="${jaxen.jar}"/>
        </antcall>
        <antcall target="-downloadfile">
            <param name="sourcefile" value="${ognl.loc}"/>
            <param name="destfile"   value="${ognl.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${commons-jxpath.loc}"/>
            <param name="destfile"   value="${commons-jxpath.jar}"/>
        </antcall>
        <antcall target="-downloadzip">
            <param name="sourcefile" value="${jgroups.loc}"/>
            <param name="destfile"   value="${jgroups.jar}"/>
        </antcall>
    </target>
    <target name="download.dependencies.runtime"
            description="Download binary packages needed only at runtime" >
        <!-- Download any sub package or tools needed. -->
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${commons-logging.loc}"/>
            <param name="destfile"   value="${commons-logging.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${xml-apis.loc}"/>
            <param name="destfile"   value="${xml-apis.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${xalan.loc}"/>
            <param name="destfile"   value="${xalan.jar}"/>
        </antcall>
    </target>

<!-- ==================== XML Entity Included Targets ==================== -->

    <!-- general utility targets which provide most of this build's functionality -->
    &general-utility-targets;
    <!-- an empty include file for adding one's own custom targets without requiring editing of build.xml -->
    &self-customized-targets;


<!-- ==================== Demo Targets ================================== -->

    <target name="-demo.init" depends="download.dependencies.runtime">
        <mkdir dir="${cachedir.demo}" />
    </target>

<!--
    <target name="run.demo.prime" depends="compile.core, -demo.init"
            description="Runs simple prime number demonstration" >

        <java dir="${cachedir.demo}" fork="false" classname="org.prevayler.demos.demo1.Main" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>

    </target>
-->

    <target name="run.demo.bank" depends="compile.core, -demo.init"
            description="Runs simple bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.Main" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.skaringa" depends="compile.core, -demo.init"
            description="Same as simple bank demo, but uses Skaringa xml serialization" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainSkaringa" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.xstream" depends="compile.core, -demo.init"
            description="Same as simple bank demo, but uses XStream xml serialization" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainXStream" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.transient" depends="compile.core, -demo.init"
            description="Runs transient bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainTransient" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

  <target name="run.scabilityRWLock" description="Runs transient bank demonstration" >
        <delete dir="${cachedir.demo}/tmp/RWLock"/>
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.scalability.prevayler.rwlock.RWLockTestRun" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
          <jvmarg line="-Xmx512m -DUSE_RWLOCK='true'"/>
          <arg line="2 10"/>
        </java>
    </target>

  <target name="run.scabilityNoRWLock" description="Runs transient bank demonstration" >
        <delete dir="${cachedir.demo}/tmp/RWLock"/>
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.scalability.prevayler.rwlock.RWLockTestRun" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
            <jvmarg line="-Xmx512m"/>
          <arg line="2 10"/>
        </java>
    </target>


<!--
    <target name="run.demo.bank.rollback" depends="compile.core, -demo.init"
            description="Runs rollback bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainRollback" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>
-->

    <target name="run.demo.bank.replica" depends="compile.core, -demo.init"
            description="Runs replica bank demonstration" >
        <parallel>
            <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainReplicaServer" >
                <classpath refid="build.run.classpath" />
                <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
            </java>
            <sequential>
                <sleep seconds="5"/>
                <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainReplica" >
                    <arg value="localhost" />
                    <classpath refid="build.run.classpath" />
                    <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
                </java>
            </sequential>
        </parallel>
    </target>

    <target name="run.demo.scalability" depends="compile.core, -demo.init"
            description="Runs manipulation and query scalability demos against Prevayler and any JDBC globsDB" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.scalability.Main" >
            <jvmarg line="${scalability.jvmarg}" />
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.memento" depends="compile.contrib, -demo.init"
            description="Runs memento bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.memento.TestErrorRecoveryWithMementos" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>


</project>
